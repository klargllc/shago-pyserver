# Generated by Django 3.2 on 2023-09-16 07:20

from django.db import migrations, models
import django.db.models.deletion
import places.utils.helpers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('metrics', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('country', models.CharField(max_length=200)),
                ('code', models.CharField(max_length=4)),
                ('symbol', models.CharField(max_length=4)),
            ],
            options={
                'verbose_name_plural': 'Currencies',
            },
        ),
        migrations.CreateModel(
            name='CustomOptionChoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('price', models.DecimalField(blank=True, decimal_places=2, max_digits=1000, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('image', models.ImageField(upload_to='food/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=150, unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('is_package_item', models.BooleanField(default=False)),
                ('about', models.TextField(blank=True, null=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=1000)),
                ('featured', models.BooleanField(default=False)),
                ('prep_time', models.DurationField(blank=True, null=True)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='places.category')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='IncludedItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=200)),
                ('image', models.ImageField(upload_to='food/')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Link',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('link_type', models.CharField(choices=[('custom', 'custom'), ('facebook', 'facebook'), ('instagram', 'instagram'), ('twitter', 'twitter'), ('whatsapp', 'whatsapp'), ('telegram', 'telegram'), ('website', 'website'), ('tiktok', 'tiktok')], default='custom', max_length=40)),
                ('link_url', models.URLField(unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NotificationMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('priority', models.CharField(max_length=20)),
                ('message', models.TextField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('source', models.CharField(blank=True, default='web:hotspot', max_length=20, null=True)),
                ('order_id', models.CharField(default=places.utils.helpers.generate_invoice_id, max_length=12, unique=True)),
                ('created_on', models.DateTimeField(auto_now=True)),
                ('payment_status', models.BooleanField(default=False)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('confirmed', 'Confirmed'), ('ready', 'Ready'), ('on-route', 'On Route'), ('delivered', 'Delivered')], default='pending', max_length=20)),
                ('payment_id', models.CharField(blank=True, max_length=10, null=True)),
                ('invoice', models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderCustomization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.customoptionchoice')),
                ('customization', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.ordercustomization')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Restaurant',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('store_mode', models.CharField(default='test', max_length=100)),
                ('disabled', models.BooleanField(default=False)),
                ('offer_delivery', models.BooleanField(default=False)),
                ('offer_dine_in', models.BooleanField(default=False)),
                ('offer_pickup', models.BooleanField(default=False)),
                ('name', models.CharField(max_length=200)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('banner', models.ImageField(blank=True, null=True, upload_to='places/banner')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='places/logo')),
                ('about', models.TextField(blank=True, null=True)),
                ('domian_name', models.CharField(blank=True, max_length=100, null=True)),
                ('delivery_fulfilment', models.CharField(max_length=20)),
                ('billing_plan', models.CharField(default='free-trial', max_length=20)),
                ('next_billing_period', models.DateField(blank=True, null=True)),
                ('current_billing_period', models.DateField(auto_now=True, null=True)),
                ('billing_information', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.billingmethod')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('tag', models.CharField(max_length=50, unique=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FoodPackage',
            fields=[
                ('fooditem_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='places.fooditem')),
            ],
            options={
                'abstract': False,
            },
            bases=('places.fooditem',),
        ),
        migrations.CreateModel(
            name='RestaurantBranch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('branch_id', models.CharField(blank=True, default=places.utils.helpers.generate_invoice_id, max_length=200, unique=True)),
                ('branch_name', models.CharField(blank=True, max_length=200, unique=True)),
                ('is_main_branch', models.BooleanField(default=False)),
                ('offer_delivery', models.BooleanField(default=False)),
                ('offer_dine_in', models.BooleanField(default=True)),
                ('offer_pickup', models.BooleanField(default=True)),
                ('inherit_menu', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(blank=True, default=False)),
                ('currency', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='places.currency')),
                ('inherit_source', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='places.restaurantbranch')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='places.location')),
                ('menu', models.ManyToManyField(blank=True, to='places.FoodItem')),
                ('place_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant')),
                ('related_orders', models.ManyToManyField(blank=True, to='places.Order')),
                ('related_staff', models.ManyToManyField(blank=True, to='accounts.RestaurantStaff')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='restaurant',
            name='branches',
            field=models.ManyToManyField(blank=True, related_name='branches', to='places.RestaurantBranch'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='categories',
            field=models.ManyToManyField(blank=True, to='places.Category'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='customers',
            field=models.ManyToManyField(blank=True, to='accounts.Customer'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='links',
            field=models.ManyToManyField(blank=True, to='places.Link'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='main_branch',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='places.restaurantbranch'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='menu',
            field=models.ManyToManyField(blank=True, related_name='food_items', to='places.FoodItem'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='notifications',
            field=models.ManyToManyField(blank=True, to='places.NotificationMessage'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='orders',
            field=models.ManyToManyField(blank=True, to='places.Order'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='owner',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='accounts.merchant'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='payout_information',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='accounts.payoutinformation'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='reviews',
            field=models.ManyToManyField(blank=True, to='metrics.Review'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='staff',
            field=models.ManyToManyField(blank=True, related_name='staff', to='accounts.RestaurantStaff'),
        ),
        migrations.AddField(
            model_name='restaurant',
            name='tags',
            field=models.ManyToManyField(blank=True, to='places.Tag'),
        ),
        migrations.CreateModel(
            name='OrderOption',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(max_length=150, unique=True)),
                ('required', models.BooleanField(default=False)),
                ('choices', models.ManyToManyField(blank=True, related_name='choices', to='places.CustomOptionChoice')),
                ('default_choice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='default', to='places.customoptionchoice')),
                ('food_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.fooditem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('quantity', models.IntegerField(default=1)),
                ('customizations', models.ManyToManyField(blank=True, to='places.OrderCustomization')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.fooditem')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='order',
            name='branch_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurantbranch'),
        ),
        migrations.AddField(
            model_name='order',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.customer'),
        ),
        migrations.AddField(
            model_name='order',
            name='delivery_location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='accounts.shippingaddress'),
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(blank=True, to='places.OrderItem'),
        ),
        migrations.AddField(
            model_name='order',
            name='place_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='branch_id',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='places.restaurantbranch'),
        ),
        migrations.AddField(
            model_name='notificationmessage',
            name='place_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant'),
        ),
        migrations.AddField(
            model_name='link',
            name='place_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='custom_choices',
            field=models.ManyToManyField(blank=True, related_name='customizations', to='places.OrderCustomization'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='images',
            field=models.ManyToManyField(blank=True, related_name='images', to='places.FoodImage'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='includes',
            field=models.ManyToManyField(blank=True, to='places.IncludedItem'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='place',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='reviews', to='metrics.Review'),
        ),
        migrations.AddField(
            model_name='fooditem',
            name='tags',
            field=models.ManyToManyField(blank=True, to='places.Tag'),
        ),
        migrations.AddField(
            model_name='foodimage',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.fooditem'),
        ),
        migrations.AddField(
            model_name='customoptionchoice',
            name='customization',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='to', to='places.orderoption'),
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('name', models.CharField(blank=True, max_length=200, null=True, unique=True)),
                ('code', models.CharField(default=places.utils.helpers.generate_invoice_id, max_length=20, unique=True)),
                ('value', models.DecimalField(decimal_places=2, max_digits=10)),
                ('value_type', models.CharField(choices=[('Flat', 'flat'), ('Percentage', 'percentage')], default='flat', max_length=10)),
                ('selector_target', models.CharField(blank=True, default='id', max_length=50)),
                ('selector_value', models.CharField(blank=True, max_length=100, null=True)),
                ('active_from', models.DateTimeField(blank=True, null=True)),
                ('expiry_date', models.DateTimeField(blank=True, null=True)),
                ('branch_ids', models.ManyToManyField(blank=True, to='places.RestaurantBranch')),
                ('place_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant')),
                ('redeemers', models.ManyToManyField(blank=True, to='accounts.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='BuyerCart',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_created', models.DateTimeField(auto_now=True, null=True)),
                ('last_modified', models.DateTimeField(auto_now_add=True, null=True)),
                ('items', models.ManyToManyField(blank=True, to='places.OrderItem')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='accounts.customer')),
                ('restaurant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='places.restaurant')),
            ],
            options={
                'abstract': False,
            },
        ),
    ]
